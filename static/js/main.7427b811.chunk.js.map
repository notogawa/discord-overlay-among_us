{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["player_colors","App","props","handleChange","event","setState","target","name","value","genetate_css","map","player_color","index","state","reduce","prev","curr","copyToClipboard","e","code","select","document","execCommand","red","blue","green","pink","orange","yellow","black","white","purple","brown","cyan","lime","color_used","console","log","this","className","_index","alt","src","process","type","onChange","readOnly","ref","onClick","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"0RAGMA,EAAgB,CACpB,MACA,OACA,QACA,OACA,SACA,SACA,QACA,QACA,SACA,QACA,OACA,QA4IaC,E,kDAvIb,WAAYC,GAAO,IAAD,8BAChB,cAAMA,IAoDRC,aAAe,SAACC,GACd,EAAKC,SAAL,eAAgBD,EAAME,OAAOC,KAAOH,EAAME,OAAOE,SAtDjC,EAyDlBC,aAAe,WACb,MAAO,qpCAwDPT,EAAcU,KAAI,SAACC,EAAcC,GACnC,MAAoC,KAA7B,EAAKC,MAAMF,GAAX,kBACJA,EADI,8CAEuB,EAAKE,MAAMF,GAFlC,qEAKuB,EAAKE,MAAMF,GALlC,6DAMiB,GAAGC,EANpB,mDAQuB,EAAKC,MAAMF,GARlC,iFASiB,GAAGC,EATpB,iCAWLE,QAAO,SAACC,EAAMC,GAAP,OAAgBD,EAAOC,MA9Hd,EAiIlBC,gBAAkB,SAACC,GACjB,EAAKC,KAAKC,SACVC,SAASC,YAAY,SAjIrB,EAAKT,MAAQ,CACXU,IAAK,GACLC,KAAM,GACNC,MAAO,GACPC,KAAM,GACNC,OAAQ,GACRC,OAAQ,GACRC,MAAO,GACPC,MAAO,GACPC,OAAQ,GACRC,MAAO,GACPC,KAAM,GACNC,KAAM,IAdQ,E,0CAkBlB,WAAU,IAAD,OAEDC,EAAa,SAACxB,GAClB,MAAoC,KAA7B,EAAKE,MAAMF,GAAuBA,EAAgBA,EAAe,SAK1E,OAFAyB,QAAQC,IAAIC,KAAKzB,OAGf,sBAAK0B,UAAU,MAAf,UACE,kFACA,qBAAKA,UAAU,UAAf,SACE,6BACGvC,EAAcU,KAAI,SAACC,EAAa6B,GAC/B,OACE,qBAAID,UAAWJ,EAAWxB,GAA1B,UACE,qBAAK4B,UAAU,QAAf,SACE,qBAAKE,IAAG,UAAK9B,EAAL,WAA4B+B,IAAG,UAAKC,4BAAL,oBAEzC,sBAAKJ,UAAU,OAAf,UACG5B,EADH,IACiB,uBACf,uBAAOiC,KAAK,OAAOrC,KAAMI,EAAckC,SAAU,EAAK1C,aAAcK,MAAO,EAAKK,MAAMF,UAN5CA,UAatD,qBAAK4B,UAAU,QAAf,SACE,0BAAUO,UAAQ,EAACC,IAAK,SAAC5B,GAAD,OAAU,EAAKA,KAAOA,GAAMX,MAAO8B,KAAK7B,eAAgBuC,QAASV,KAAKrB,2B,GAjDtFgC,aCNHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFxC,SAASyC,eAAe,SAM1BZ,M","file":"static/js/main.7427b811.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nconst player_colors = [\n  \"red\",\n  \"blue\",\n  \"green\",\n  \"pink\",\n  \"orange\",\n  \"yellow\",\n  \"black\",\n  \"white\",\n  \"purple\",\n  \"brown\",\n  \"cyan\",\n  \"lime\",\n];\n\nclass App extends Component {\n  \n  constructor(props){\n    super(props);\n    this.state = {\n      red: \"\",\n      blue: \"\",\n      green: \"\",\n      pink: \"\",\n      orange: \"\",\n      yellow: \"\",\n      black: \"\",\n      white: \"\",\n      purple: \"\",\n      brown: \"\",\n      cyan: \"\",\n      lime: \"\",\n    }\n  }\n  \n  render() {\n    \n    const color_used = (player_color) => {\n      return this.state[player_color] === \"\" ? player_color : (player_color + \" used\");\n    }\n\n    console.log(this.state);\n\n    return (\n      <div className=\"App\">\n        <h1>Discord StreamKit Overlay ID Mapper for Among Us</h1>\n        <div className=\"players\">\n          <ul>\n            {player_colors.map((player_color,_index) => {\n              return (\n                <li className={color_used(player_color)} key={player_color}>\n                  <div className=\"chara\">\n                    <img alt={`${player_color} player`} src={`${process.env.PUBLIC_URL}/players.png`}/>\n                  </div>\n                  <div className=\"form\">\n                    {player_color} <br/>\n                    <input type=\"text\" name={player_color} onChange={this.handleChange} value={this.state[player_color]}/>\n                  </div>\n                </li>\n              )\n            })}\n          </ul>\n        </div>\n        <div className=\"style\">\n          <textarea readOnly ref={(code) => this.code = code} value={this.genetate_css()} onClick={this.copyToClipboard}/>\n        </div>\n      </div>\n    );\n  }\n  \n  handleChange = (event) => {\n    this.setState({[event.target.name]: event.target.value})\n  }\n  \n  genetate_css = () => {\n    return `/* Created by https://notogawa.github.io/discord-overlay-among_us/ */\nbody {\n  background-color: rgba(0, 0, 0, 0);\n  margin: 0;\n  padding: 0;\n  overflow: hidden;\n}\n\n.avatar.speaking + .user .name {\n  background: #41DAC6 !important;\n}\n\n.user .name {\n  position: relative;\n  overflow: visible;\n  display: inline-block;\n}\n\n.user .name::before {\n  position: absolute;\n  top: -50px;\n  left: -150px;\n  content: \"\";\n  display: block;\n  width: 90px;\n  height: 115px;\n  background-image: url(https://notogawa.github.io/discord-overlay-among_us/players.png);\n  background-size: 1080px auto;\n  transform: scale(0.75);\n}\n\n.avatar + .user .name::before {\n  transition: all 0.05s 0s ease-in-out;\n}\n\n.avatar.speaking + .user .name::before {\n  transform: translateX(-15px) scale(-1, 1);\n  animation: rotation 0.75s ease 0.1s infinite alternate none running;\n}\n\nli.voice-state {\n  display: none;\n  padding: 20px 0 0 90px;\n}\n\n@keyframes rotation {\n  0% {\n    transform: translateX(-15px) scale(-1, 1);\n  }\n  50% {\n    transform: translateX(-15px) scale(-1.1, 0.85);\n  }\n  100% {\n    transform: translateX(-15px) scale(-1, 1);\n  }\n}\n` + player_colors.map((player_color, index) => {\n  return this.state[player_color] === \"\" ? `` : `\n/* ${player_color} */\nli.voice-state[data-reactid*=\"${this.state[player_color]}\"] {\n  display: block;\n}\nli.voice-state[data-reactid*=\"${this.state[player_color]}\"] .user .name::before {\n  background-position: -${90*index}px 0;\n}\nli.voice-state[data-reactid*=\"${this.state[player_color]}\"] .avatar.speaking +  .user .name::before {\n  background-position: -${90*index}px -115px !important;\n}\n`}).reduce((prev, curr) => prev + curr)\n  }\n  \n  copyToClipboard = (e) => {\n    this.code.select();\n    document.execCommand('copy');\n  };\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}